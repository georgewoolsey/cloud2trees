% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trees_competition.R
\name{trees_competition}
\alias{trees_competition}
\title{Calculate competition metrics for a tree list}
\usage{
trees_competition(
  tree_list,
  crs = NA,
  competition_buffer_m = 5,
  study_boundary = NA,
  search_dist_max = 10
)
}
\arguments{
\item{tree_list}{data.frame. A data frame with the columns \code{treeID}, \code{tree_x}, \code{tree_y}, and \code{tree_height_m}.
If an \code{sf} class object with POINT geometry (see \code{\link[sf:st_geometry_type]{sf::st_geometry_type()}}), the program will use the data "as-is" and only require the \code{treeID} and \code{tree_height_m} columns.}

\item{crs}{string. A crs string as returned from \code{\link[sf:st_crs]{sf::st_crs()}} or the EPSG code of the x,y coordinates.
Defaults to the crs of the \code{tree_list} data if of class "sf".}

\item{competition_buffer_m}{number. Set buffer around tree (m) to calculate competition metrics}

\item{study_boundary}{sf. If you want to scale per ha calculations, provide the geography of the study boundary}

\item{search_dist_max}{number. Maximum search distance (m) to nearest tree. Larger search distances will increase processing time and possibly result in memory issues.
If no competition trees are found within this distance, the return column \code{comp_dist_to_nearest_m} = \code{search_dist_max} parameter.}
}
\value{
Returns a spatial data frame of individual trees.
}
\description{
\code{trees_competition()} uses the input tree list (e.g. as exported by \code{\link[=raster2trees]{raster2trees()}}) with the columns
\code{treeID}, \code{tree_x}, \code{tree_y}, and \code{tree_height_m} to calculate competition metrics at the tree level.

Competition metrics returned include:
\itemize{
\item Distance to the nearest neighbor (\code{comp_dist_to_nearest_m})
\item Trees per ha within a 5m radius (\code{comp_trees_per_ha})
\item The relative tree height (\code{comp_relative_tree_height} = height_tree / height_max) within a 5m radius where a value of 1 indicates the tallest tree.
}
}
\examples{
 \dontrun{
 # example tree list
 tl <- dplyr::tibble(
     treeID = c(1:21)
     , tree_x = rnorm(n=21, mean = 458064, sd = 11)
     , tree_y = rnorm(n=21, mean = 4450074, sd = 11)
     , tree_height_m = exp(rgamma(n = 21, shape = (7/4)^2, rate = (4^2)/7))
   )
 # call the function
 tl_comp <- trees_competition(tree_list = tl, crs = "32613")
 # what?
 tl_comp \%>\% class()
 tl_comp \%>\% dplyr::select(tidyselect::starts_with("comp_")) \%>\% dplyr::glimpse()
 tl_comp \%>\% ggplot2::ggplot() + ggplot2::geom_sf(ggplot2::aes(color=comp_dist_to_nearest_m))
 }
}
\references{
\url{https://doi.org/10.3390/f13122077}
Tinkham et al. (2022). Modeling the missing DBHs: Influence of model form on UAV DBH characterization. Forests, 13(12), 2077.
}
