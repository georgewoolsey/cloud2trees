% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cloud2trees.R
\name{cloud2trees}
\alias{cloud2trees}
\title{Use raw .las|.laz files to generate CHM, DTM, and a tree list}
\usage{
cloud2trees(
  output_dir,
  input_las_dir,
  input_treemap_dir = NULL,
  input_foresttype_dir = NULL,
  input_landfire_dir = NULL,
  accuracy_level = 2,
  max_ctg_pts = 7e+07,
  max_area_m2 = 9e+07,
  transform = FALSE,
  new_crs = NA,
  old_crs = NA,
  keep_intrmdt = FALSE,
  dtm_res_m = 1,
  chm_res_m = 0.25,
  min_height = 2,
  max_height = 70,
  ws = function(x) {
     y <- dplyr::case_when(is.na(x) ~ 0.001, x < 0 ~ 0.001, x < 2 ~
    1, x > 30 ~ 5, TRUE ~ 0.75 + (x * 0.14))
     return(y)
 },
  estimate_tree_dbh = FALSE,
  max_dbh = 2,
  dbh_model = "lin",
  estimate_dbh_from_cloud = FALSE,
  estimate_tree_competition = FALSE,
  competition_buffer_m = 5,
  search_dist_max,
  competition_max_search_dist_m = 10,
  estimate_tree_type = FALSE,
  type_max_search_dist_m = 1000,
  estimate_tree_hmd = FALSE,
  hmd_estimate_missing_hmd = FALSE,
  estimate_biomass_method = NA,
  estimate_tree_cbh = FALSE,
  cbh_tree_sample_n = NA,
  cbh_tree_sample_prop = NA,
  cbh_which_cbh = "lowest",
  cbh_estimate_missing_cbh = FALSE,
  cbh_min_vhp_n = 3,
  cbh_voxel_grain_size_m = 1,
  cbh_dist_btwn_bins_m = 1,
  cbh_min_fuel_layer_ht_m = 1,
  cbh_lad_pct_gap = 25,
  cbh_lad_pct_base = 25,
  cbh_num_jump_steps = 1,
  cbh_min_lad_pct = 10,
  cbh_frst_layer_min_ht_m = 1,
  overwrite = TRUE
)
}
\arguments{
\item{output_dir}{parent directory where new folders \code{point_cloud_processing_delivery} and \code{point_cloud_processing_temp} will be written for exports}

\item{input_las_dir}{directory where .las|.laz point cloud data exists...program will search all sub-directories for all .las|.laz files and process them as one}

\item{input_treemap_dir}{character. directory where Treemap 2016 exists. Use \code{\link[=get_treemap]{get_treemap()}} first.}

\item{input_foresttype_dir}{character. directory where Forest Type Groups data exists. Use \code{\link[=get_foresttype]{get_foresttype()}} first.}

\item{input_landfire_dir}{character. directory where LANDFIRE CBD data exists. Use \code{\link[=get_landfire]{get_landfire()}} first.}

\item{accuracy_level}{numeric. Choose processing accuracy.
accuracy_level = 1 uses DTM to height normalize the points
accuracy_level = 2 uses triangulation with high point density (20 pts/m2) to height normalize the points
accuracy_level = 3 uses triangulation with very high point density (100 pts/m2) to height normalize the points}

\item{max_ctg_pts}{numeric. Max number of points to process at one time. Setting this number higher will possibly reduce run times but increase the chance of running out of memory and vice versa.}

\item{max_area_m2}{numeric. Max area to process at one time. See \code{max_ctg_pts} parameter, this one is less important as never experienced memory issues with large areas (just lots of points)}

\item{transform}{logical. should the las/laz files be transformed? If set to \code{TRUE} the parameters \code{new_crs} must be defined.}

\item{new_crs}{string. crs to change to as an epsg numerical code}

\item{old_crs}{string. crs to change from as an epsg numerical code}

\item{keep_intrmdt}{logical. this process writes intermediate data to the disk, keep those intermediate files (classfied, normalized, stem las files)?}

\item{dtm_res_m}{numeric. The desired resolution of the DTM produced in meters.}

\item{chm_res_m}{numeric. The desired resolution of the CHM produced in meters.}

\item{min_height}{numeric. Set the minimum height (m) for individual tree detection}

\item{max_height}{numeric. Set the maximum height (m) for the canopy height model}

\item{ws}{numeric or function. Length or diameter of the moving window used to detect the local
maxima in the units of the input data (usually meters). If it is numeric a fixed window size is used.
If it is a function, the function determines the size of the window at any given location on the canopy.
By default function takes the height of a given pixel as its only argument and return the
desired size of the search window when centered on that pixel.}

\item{estimate_tree_dbh}{logical. Should tree DBH be estimated? See \code{\link[=trees_dbh]{trees_dbh()}}.}

\item{max_dbh}{numeric. Set the largest tree diameter (m) expected in the point cloud}

\item{dbh_model}{string. Set the model to use for local dbh-height allometry. Can be "rf" for random forest or "lin" for linear}

\item{estimate_dbh_from_cloud}{logical. Should DBH be estimated from the point cloud? See \code{\link[=treels_stem_dbh]{treels_stem_dbh()}}. Setting to \code{TRUE} may significantly increase processing time.}

\item{estimate_tree_competition}{logical. Should tree competition metrics be calculated? See \code{\link[=trees_competition]{trees_competition()}}. Setting to \code{TRUE} may slightly increase processing time.}

\item{competition_buffer_m}{number. Set buffer around tree (m) to calculate competition metrics}

\item{search_dist_max}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} Use the \code{competition_max_search_dist_m} argument instead.}

\item{competition_max_search_dist_m}{number. Maximum search distance (m) to nearest tree for competition. Larger search distances will increase processing time and possibly result in memory issues.
If no competition trees are found within this distance, the return column \code{comp_dist_to_nearest_m} = \code{competition_max_search_dist_m} parameter.}

\item{estimate_tree_type}{logical. Should tree forest type be estimated? See \code{\link[=trees_type]{trees_type()}}.}

\item{type_max_search_dist_m}{number. Maximum search distance (m) to obtain forest type group data for trees that overlap with non-forest data in the original Wilson (2023) data.
Larger search distances will increase processing time and possibly result in memory issues.}

\item{estimate_tree_hmd}{logical. Should tree height of the maximum crown diameter (HMD) be estimated? See \code{\link[=trees_hmd]{trees_hmd()}}.}

\item{hmd_estimate_missing_hmd}{logical. It is not likely that HMD will be extracted successfully from every tree.
Should the missing HMD values be estimated using the tree height and location information based on trees for which HMD is successfully extracted?}

\item{estimate_biomass_method}{character. To estimate tree biomass or tree (or crown biomass) enter one or a list of multiple biomass methods. See \code{\link[=trees_biomass]{trees_biomass()}}.
Leave as blank (i.e. \code{NA}) to skip biomass estimation.}

\item{estimate_tree_cbh}{logical. Should tree DBH be estimated? See \code{\link[=trees_cbh]{trees_cbh()}}.
Make sure to set \code{cbh_estimate_missing_cbh = TRUE} if you want to obtain CBH values for cases when CBH cannot be extracted from the point cloud.}

\item{cbh_tree_sample_n, cbh_tree_sample_prop}{numeric. Provide either \code{tree_sample_n}, the number of trees, or \code{tree_sample_prop}, the
proportion of the trees to attempt to extract a CBH from the point cloud for.
If neither are supplied, \code{tree_sample_n = 333} will be used. If both are supplied, \code{tree_sample_n} will be used.
Increasing \code{tree_sample_prop} toward one (1) will increase the processing time, perhaps significantly depending on the number of trees in the \code{trees_poly} data.
The maximum number of trees to extract tree CBH using \code{cloud2trees()} is 20,000.
Try \code{trees_cbh()} with outputs from \code{cloud2trees()} if you want to attempt to extract CBH for >20,000 trees.}

\item{cbh_which_cbh}{character. One of: "lowest"; "highest"; or "max_lad". See Viedma et al. (2024) reference.
\itemize{
\item "lowest" - Height of the CBH of the segmented tree based on the last distance found in its profile
\item "highest" - Height of the CBH of the segmented tree based on the maximum distance found in its profile
\item "max_lad" - Height of the CBH of the segmented tree based on the maximum LAD percentage
}}

\item{cbh_estimate_missing_cbh}{logical. even if the \code{cbh_tree_sample_prop} parameter is set to "1", it is not likely that CBH will be extracted successfully from every tree.
Should the missing CBH values be estimated using the tree height and location information based on trees for which CBH is successfully extracted?}

\item{cbh_min_vhp_n}{numeric. the minimum number of vertical height profiles (VHPs) needed to estimate a CBH.}

\item{cbh_voxel_grain_size_m}{numeric. horizontal resolution (suggested 1 meter for lad profiles and 10 meters for LAI maps). See \code{grain.size} in \code{\link[leafR:lad.voxels]{leafR::lad.voxels()}}}

\item{cbh_dist_btwn_bins_m}{numeric. value for the actual height bin step (in meters). See \code{step} in \code{\link[LadderFuelsR:get_gaps_fbhs]{LadderFuelsR::get_gaps_fbhs()}}}

\item{cbh_min_fuel_layer_ht_m}{numeric. value for the actual minimum base height (in meters). See \code{min_height} in \code{\link[LadderFuelsR:get_gaps_fbhs]{LadderFuelsR::get_gaps_fbhs()}}}

\item{cbh_lad_pct_gap}{numeric. value of the percentile threshold used to identify gaps (default percentile 25th). See \code{perc_gap} in \code{\link[LadderFuelsR:get_gaps_fbhs]{LadderFuelsR::get_gaps_fbhs()}}}

\item{cbh_lad_pct_base}{numeric. value of the percentile threshold used to identify fuels layers base height (default percentile 25th). See \code{perc_base} in \code{\link[LadderFuelsR:get_gaps_fbhs]{LadderFuelsR::get_gaps_fbhs()}}}

\item{cbh_num_jump_steps}{numeric. value for the number of height bin steps that can be jumped to reshape fuels layers. See \code{number_steps} in \code{\link[LadderFuelsR:get_real_fbh]{LadderFuelsR::get_real_fbh()}}}

\item{cbh_min_lad_pct}{numeric. value for the minimum required LAD percentage in a fuel layer. See \code{threshold} in \code{\link[LadderFuelsR:get_layers_lad]{LadderFuelsR::get_layers_lad()}}}

\item{cbh_frst_layer_min_ht_m}{numeric. value for the depth height of the first fuel layer. If the first fuel layer has the maximum LAD and its depth is greater than the indicated value, then this fuel layer is considered as the CBH of the tree. On the contrary, if its depth is <= the value, the CBH with maximum LAD will be the second fuel layer, although it has not the maximum LAD. See \code{hdepth1_height} in \code{\link[LadderFuelsR:get_cbh_metrics]{LadderFuelsR::get_cbh_metrics()}}}

\item{overwrite}{logical. Should the output files in the \code{point_cloud_processing_delivery} directory from previous iterations be deleted?}
}
\value{
Returns the goods.
Exports files of the goods to new folders "point_cloud_processing_delivery" and "point_cloud_processing_temp" in the
\code{output_dir} defined by the user in the function call.
}
\description{
\code{cloud2trees()} is an all-in-one function to process raw .las|.laz files
to generate a CHM raster (.tif), a DTM raster (.tif), and a tree list with tree location, height, and DBH.
The order of operations is:
\itemize{
\item Generate a CHM from the point cloud using \code{\link[=cloud2raster]{cloud2raster()}}
\item Perform individual tree detection using \code{\link[=raster2trees]{raster2trees()}}
\item Quantify individual tree competition metrics using \code{\link[=trees_competition]{trees_competition()}} (\emph{if set to TRUE})
\item Extract tree DBH values from the normalized point cloud using \code{\link[=treels_stem_dbh]{treels_stem_dbh()}} (\emph{if set to TRUE})
\item Model tree DBH values using \code{\link[=trees_dbh]{trees_dbh()}} (\emph{if set to TRUE})
\item Extract tree forest type group using \code{\link[=trees_type]{trees_type()}} (\emph{if set to TRUE})
\item Extract tree CBH values from the normalized point cloud and estimate missing values using \code{\link[=trees_cbh]{trees_cbh()}} (\emph{if set to TRUE})
\item Estimate tree biomass (or crown biomass) using \code{\link[=trees_biomass]{trees_biomass()}} (\emph{if method is denoted})
}

See the documentation for each individual function called for more details.
}
\examples{
 \dontrun{
 # test las file but this could also be a directory path with >1 .las|.laz files
 i <- system.file("extdata", "MixedConifer.laz", package="lidR")
 # run it
 cloud2trees_ans <- cloud2trees::cloud2trees(output_dir = tempdir(), input_las_dir = i)
 # what is it?
 cloud2trees_ans \%>\% names()
 # there's a DTM
 cloud2trees_ans$dtm_rast \%>\% terra::plot()
 # there's a CHM
 cloud2trees_ans$chm_rast \%>\% terra::plot()
 # there are tree crowns
 cloud2trees_ans$crowns_sf \%>\% dplyr::glimpse()
 cloud2trees_ans$crowns_sf \%>\% ggplot2::ggplot() +
  ggplot2::geom_sf(mapping = ggplot2::aes(fill = tree_height_m))
 # there are tree top points
 cloud2trees_ans$treetops_sf \%>\% dplyr::glimpse()
 cloud2trees_ans$treetops_sf \%>\% ggplot2::ggplot() +
  ggplot2::geom_sf(mapping = ggplot2::aes(color = tree_height_m))
 }
}
