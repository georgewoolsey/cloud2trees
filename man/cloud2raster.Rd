% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cloud2raster.R
\name{cloud2raster}
\alias{cloud2raster}
\title{Use raw .las|.laz files to generate CHM, DTM, and Normalized .las files}
\usage{
cloud2raster(
  output_dir,
  input_las_dir,
  input_treemap_dir = paste0(system.file(package = "cloud2trees"), "/extdata/treemap"),
  accuracy_level = 2,
  max_ctg_pts = 7e+07,
  max_area_m2 = 9e+07,
  transform = FALSE,
  new_crs = NA,
  old_crs = NA,
  keep_intrmdt = F,
  dtm_res_m = 1,
  chm_res_m = 0.25,
  min_height = 2,
  max_height = 70,
  overwrite = TRUE
)
}
\arguments{
\item{output_dir}{parent directory where new folders \code{point_cloud_processing_delivery} and \code{point_cloud_processing_temp} will be written for exports}

\item{input_las_dir}{directory where .las|.laz point cloud data exists...program will search all sub-directories for all .las|.laz files and process them as one}

\item{input_treemap_dir}{directory where Treemap 2016 exists. Use \code{\link[=get_treemap]{get_treemap()}} first.}

\item{accuracy_level}{numeric. Choose processing accuracy.
accuracy_level = 1 uses DTM to height normalize the points
accuracy_level = 2 uses triangulation with high point density (20 pts/m2) to height normalize the points
accuracy_level = 3 uses triangulation with very high point density (100 pts/m2) to height normalize the points}

\item{max_ctg_pts}{numeric. Max number of points to process at one time. Setting this number higher will possibly reduce run times but increase the chance of running out of memory and vice versa.}

\item{max_area_m2}{numeric. Max area to process at one time. See \code{max_ctg_pts} parameter, this one is less important as never experienced memory issues with large areas (just lots of points)}

\item{transform}{logical. should the las/laz files be transformed? If set to \code{TRUE} the parameters \code{new_crs} must be defined.}

\item{new_crs}{string. crs to change to as an epsg numerical code}

\item{old_crs}{string. crs to change from as an epsg numerical code}

\item{keep_intrmdt}{logical. this process writes intermediate data to the disk, keep those intermediate files (classfied, normalized, stem las files)?}

\item{dtm_res_m}{numeric. The desired resolution of the DTM produced in meters.}

\item{chm_res_m}{numeric. The desired resolution of the CHM produced in meters.}

\item{min_height}{numeric. Set the minimum height (m) for individual tree detection}

\item{max_height}{numeric. Set the maximum height (m) for the canopy height model}

\item{overwrite}{logical. Should the output files in the \code{point_cloud_processing_delivery} directory from previous iterations be deleted?}
}
\value{
Returns the goods.
Exports files of the goods to new folders "point_cloud_processing_delivery" and "point_cloud_processing_temp" in the
\code{output_dir} defined by the user in the function call.
}
\description{
\code{cloud2raster()} is an all-in-one function to process raw .las|.laz files
to generate a CHM raster (.tif), a DTM raster (.tif), and .las files which have been height normalized.
The order of operations is:
\itemize{
\item Tile the raw point cloud to work with smaller chunks and reduce the potential for memory issues with high density clouds using \code{\link[=chunk_las_catalog]{chunk_las_catalog()}}
\item Classify the point cloud using \code{\link[lasR:classify_with_csf]{lasR::classify_with_csf()}}
\item Remove outlier points using \code{\link[lasR:classify_with_ivf]{lasR::classify_with_ivf()}}
\item Produce a triangulation of the ground points (meshed DTM) using \code{\link[lasR:triangulate]{lasR::triangulate()}}
\item Rasterize the result of the Delaunay triangulation using \code{\link[lasR:rasterize]{lasR::rasterize()}} to create a DTM
\item Height normalize the point cloud using either the DTM or the triangulation \code{\link[lasR:transform_with]{lasR::transform_with()}}
\item Use the height normalized point cloud to create the CHM based on the highest point in a pixel using \code{\link[lasR:rasterize]{lasR::rasterize()}}
\item Pits and spikes filling of the CHM raster using \code{\link[lasR:pit_fill]{lasR::pit_fill()}}
\item Smooth the CHM raster tile gaps using \code{\link[terra:focal]{terra::focal()}}
}
}
\examples{
 \dontrun{
 # test las file but this could also be a directory path with >1 .las|.laz files
 i <- list.files(system.file(package = "lidR", "extdata/"), recursive = T, full.names = T) \%>\%
     tolower() \%>\%
     stringr::str_subset("mixedconifer") \%>\%
     stringr::str_subset(".*\\\\.(laz|las)$")
 # run it
 r <- cloud2trees::cloud2raster(output_dir = tempdir(), input_las_dir = i)
 # what is it?
 r \%>\% names()
 # there's a DTM
 r$dtm_rast \%>\% terra::plot()
 # there's a CHM
 r$chm_rast \%>\% terra::plot()
 # there's a data.frame with the file structure for the project
 r$create_project_structure_ans \%>\% dplyr::glimpse()
 # there's a information detailing how the point cloud was processed
 r$chunk_las_catalog_ans$process_data \%>\% dplyr::glimpse()
 r$chunk_las_catalog_ans$is_chunked_grid
 r$chunk_las_catalog_ans$las_ctg@data \%>\% dplyr::glimpse()
 # there's a list of the height normalized .las files created
 r$normalize_flist
 }
}
\references{
\url{https://r-lidar.github.io/lasR/index.html}
\url{https://r-lidar.github.io/lidRbook/normalization.html}
}
